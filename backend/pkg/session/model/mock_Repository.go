// Code generated by mockery v1.0.0. DO NOT EDIT.

package model

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) Add(_a0 context.Context, _a1 *Session) (*Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *Session
	if rf, ok := ret.Get(0).(func(context.Context, *Session) *Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Session) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) Get(_a0 context.Context, _a1 string) (*Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) List(_a0 context.Context, _a1 Filter) ([]*Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*Session
	if rf, ok := ret.Get(0).(func(context.Context, Filter) []*Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) Update(_a0 context.Context, _a1 *Session) (*Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *Session
	if rf, ok := ret.Get(0).(func(context.Context, *Session) *Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Session) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
